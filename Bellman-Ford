#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define V 8 // The number of vertices, based on the array initializations
#define INF 99999 // A large value representing infinity (or DBL_MAX)

// Structure for an edge in the graph
typedef struct Edge {
    int src, dest;
    float weight;
} Edge;


// Function to calculate Euclidean distance (appears to be a utility function)
float calculate_distance(int x1, int y1, int x2, int y2) {
    // The expression for Euclidean distance: sqrt((x2-x1)^2 + (y2-y1)^2)
    return sqrt( (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) );
}


// Function to implement the Bellman-Ford algorithm
void BellmanFord(struct Edge edges[], int arc) {
    // arc is likely the number of edges (E)
    float dist[V];

    // Step 1: Initialize distances from source to all vertices as INF, except for the source itself.
    for (int i = 0; i < V; i++) {
        dist[i] = INF;
    }
    // Assuming the source is always vertex 0 based on the main function call 'BellmanFord(edges, source);'
    // where source is implicitly 0 (or should be passed as an argument).
    // Let's assume the source is dist[0] = 0; based on standard Bellman-Ford implementation.
    dist[0] = 0; // Source is vertex 0

    // Step 2: Relax all edges V-1 times.
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < arc; j++) {
            int u = edges[j].src;
            int v = edges[j].dest;
            float weight = edges[j].weight;

            // Relaxation step
            if (dist[u] != INF && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
            }
        }
    }

    // Step 3: Check for negative-weight cycles.
    for (int j = 0; j < arc; j++) {
        int u = edges[j].src;
        int v = edges[j].dest;
        float weight = edges[j].weight;

        if (dist[u] != INF && dist[u] + weight < dist[v]) {
            printf("Negative weight cycle detected!\n");
            return; // Stop if a negative cycle is found
        }
    }

    // Print the shortest distances
    printf("Shortest distances from source %d:\n", 0);
    for (int i = 0; i < V; i++) {
        // Only print finite distances
        if (dist[i] == INF) {
             printf("To %d -> INF\n", i);
        } else {
             printf("To %d -> %f\n", i, dist[i]);
        }
    }
}

int main() {
    // Edge array (src, dest, weight)
    struct Edge edges[] = {
        // Sample graph edges and weights
        {0, 1, 6},
        {0, 2, 7},
        {1, 3, 5},
        {1, 4, -4},
        {2, 3, -8},
        {2, 4, 9},
        {3, 1, -2},
        {4, 0, 2},
        {4, 3, 7},
        {5, 6, 3},
        {6, 7, 3},
        {7, 5, -2}
        // ... more edges might be implied by V=8, but these are the ones visible
    };

    
    int E = sizeof(edges) / sizeof(edges[0]);

    int source = 0;

    BellmanFord(edges, E);

    return 0;
}
